#!/usr/bin/env bb

(ns commit-msg.main
  (:require [clojure.data.json :as json]
            [babashka.cli      :as cli]
            [babashka.process  :refer [shell process exec]]))


;;(prn *command-line-args*)


(defn display-with-shell
  "Displays 'lines' using the 'shell' command, which supports color coding.  Argument 'lines' may be a string or a vector of strings."
  [lines]
  (if (= (.getSimpleName (type lines)) "String")
    (display-with-shell [lines])
    (dorun (map shell (map #(str "echo -e " %) lines)))))


(defn display-with-shell-newline
  "Displays newlines.  Displays one newline without arguments or int 'num' newlines."
  ([]
  (display-with-shell-newline 1))
  ([num]
  (display-with-shell (vec (repeat num "\n")))))


(defn display-err-msg
  "Displays the error message string 'err-msg', using color-coding from the shell"
  [err-msg]
  (display-with-shell
   ["\\e[1m\\e[31m[COMMIT REJECTED (local)]"
    "\\e[0m\\e[1mCommit failed: " err-msg]))


(defn display-warn-msg
  "Displays the warning message string 'warn-msg' and notes that the commit is proceeding.  Uses color-coding from the shell."
  [warn-msg]
  (display-with-shell (str "\\e[34mWARNING (local): " warn-msg "  Commit proceeding.\033[0m\\e[0m")))


(defn display-commit-msg
  "Displays the commit message string 'msg' and, if the optional int 'line-num' is set, notes the line number in error and highlights that line in the commit message.  Uses color-coding from the shell."
  [msg line-num]
  (display-with-shell 
   ["\\e[34m**********************************************"
    "BEGIN - COMMIT MESSAGE ***********************"]))
;;todo finish


;;(let [commit-msg-cfg "commit-msg.cfg.json"])

(display-err-msg "err!")
(display-with-shell-newline)
(display-with-shell-newline 3)
(display-warn-msg "warned!")


;;(System/exit 1)